---
- name: Get running VMs from Proxmox nodes
  hosts: localhost
  gather_facts: false
  vars:
    proxmox_user: "ansible@pve"
    proxmox_token_id: "ansible-token"
    proxmox_token_secret: "{{ ansible_password }}"
    validate_certs: false
    target_node: "all"
    proxmox_nodes:
      - remonster-1
      - remonster-2
      - remonster-3c
      - remonster-4
      - remonster-5

  tasks:
    - name: Get VM IDs from each node
      uri:
        url: "https://{{ hostvars[groups['proxmox'][0]].ansible_host }}:8006/api2/json/nodes/{{ item }}/qemu"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_user }}!{{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: no
      loop: "{{ proxmox_nodes if target_node == 'all' else [target_node] }}"
      register: vm_list

    - name: Collect VM status for each VM ID
      uri:
        url: "https://{{ hostvars[groups['proxmox'][0]].ansible_host }}:8006/api2/json/nodes/{{ item.node }}/qemu/{{ item.vmid }}/status/current"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_user }}!{{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: no
      loop: "{{ vm_list.results | map(attribute='json.data') | sum(start=[]) | list }}"
      loop_control:
        label: "{{ item.node }}-{{ item.vmid }}"
      register: vm_status

    - name: Filter only running VMs
      set_fact:
        running_vms: "{{ vm_status.results | map(attribute='json.data') | selectattr('status','equalto','running') | list }}"

    - name: Print running VMs by node
      debug:
